
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.19.1
 * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
 */
Prisma.prismaVersion = {
  client: "5.19.1",
  engine: "69d742ee20b815d88e17e54db4a2a7a3b30324e3"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PatientsScalarFieldEnum = {
  patient_id: 'patient_id',
  first_name: 'first_name',
  last_name: 'last_name',
  date_of_birth: 'date_of_birth',
  gender: 'gender',
  contact_number: 'contact_number',
  address: 'address'
};

exports.Prisma.DoctorsScalarFieldEnum = {
  doctor_id: 'doctor_id',
  first_name: 'first_name',
  last_name: 'last_name',
  specialty: 'specialty',
  contact_number: 'contact_number',
  department_id: 'department_id'
};

exports.Prisma.DepartmentsScalarFieldEnum = {
  department_id: 'department_id',
  department_name: 'department_name'
};

exports.Prisma.AppointmentsScalarFieldEnum = {
  appointment_id: 'appointment_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  appointment_date: 'appointment_date',
  reason_for_visit: 'reason_for_visit'
};

exports.Prisma.RoomsScalarFieldEnum = {
  room_id: 'room_id',
  room_number: 'room_number',
  room_type: 'room_type',
  availability_status: 'availability_status'
};

exports.Prisma.MedicalHistoryScalarFieldEnum = {
  history_id: 'history_id',
  patient_id: 'patient_id',
  treatment: 'treatment',
  treatment_date: 'treatment_date'
};

exports.Prisma.DiagnosisScalarFieldEnum = {
  diagnosis_id: 'diagnosis_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  diagnosis_description: 'diagnosis_description',
  diagnosis_date: 'diagnosis_date'
};

exports.Prisma.MedicationsScalarFieldEnum = {
  medication_id: 'medication_id',
  medication_name: 'medication_name',
  dosage: 'dosage',
  side_effects: 'side_effects'
};

exports.Prisma.TreatmentsScalarFieldEnum = {
  treatment_id: 'treatment_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  medication_id: 'medication_id',
  treatment_description: 'treatment_description',
  treatment_date: 'treatment_date'
};

exports.Prisma.InsuranceScalarFieldEnum = {
  insurance_id: 'insurance_id',
  patient_id: 'patient_id',
  provider_name: 'provider_name',
  policy_number: 'policy_number',
  coverage_amount: 'coverage_amount'
};

exports.Prisma.LabTestsScalarFieldEnum = {
  test_id: 'test_id',
  patient_id: 'patient_id',
  test_name: 'test_name',
  test_result: 'test_result',
  test_date: 'test_date',
  doctor_id: 'doctor_id'
};

exports.Prisma.BillsScalarFieldEnum = {
  bill_id: 'bill_id',
  patient_id: 'patient_id',
  total_amount: 'total_amount',
  billing_date: 'billing_date',
  insurance_covered: 'insurance_covered',
  amount_paid: 'amount_paid'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Patients: 'Patients',
  Doctors: 'Doctors',
  Departments: 'Departments',
  Appointments: 'Appointments',
  Rooms: 'Rooms',
  MedicalHistory: 'MedicalHistory',
  Diagnosis: 'Diagnosis',
  Medications: 'Medications',
  Treatments: 'Treatments',
  Insurance: 'Insurance',
  LabTests: 'LabTests',
  Bills: 'Bills'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
