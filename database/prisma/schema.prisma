// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//docker exec -it 0e65f3802e30 psql -U myuser -d mydatabase

generator client {
  provider = "prisma-client-js"  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patients {
  patient_id      Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  date_of_birth   DateTime
  gender          String
  contact_number  String
  address         String
  appointments    Appointments[]
  medicalHistory  MedicalHistory[]
  diagnosis       Diagnosis[]
  treatments      Treatments[]
  insurance       Insurance[]
  labTests        LabTests[]
  bills           Bills[]
}

model Doctors {
  doctor_id       Int           @id @default(autoincrement())
  first_name      String
  last_name       String
  specialty       String
  contact_number  String
  department_id   Int
  department      Departments   @relation(fields: [department_id], references: [department_id])
  appointments    Appointments[]
  diagnosis       Diagnosis[]
  treatments      Treatments[]
  labTests        LabTests[]
}

model Departments {
  department_id    Int        @id @default(autoincrement())
  department_name  String
  doctors          Doctors[]
}

model Appointments {
  appointment_id    Int       @id @default(autoincrement())
  patient_id        Int
  doctor_id         Int
  appointment_date  DateTime
  reason_for_visit  String
  patient           Patients   @relation(fields: [patient_id], references: [patient_id])
  doctor            Doctors    @relation(fields: [doctor_id], references: [doctor_id])
}

model Rooms {
  room_id           Int        @id @default(autoincrement())
  room_number       String
  room_type         String
  availability_status Boolean
}

model MedicalHistory {
  history_id        Int        @id @default(autoincrement())
  patient_id        Int
  treatment         String
  treatment_date    DateTime
  patient           Patients   @relation(fields: [patient_id], references: [patient_id])
}

model Diagnosis {
  diagnosis_id      Int        @id @default(autoincrement())
  patient_id        Int
  doctor_id         Int
  diagnosis_description String
  diagnosis_date    DateTime
  patient           Patients   @relation(fields: [patient_id], references: [patient_id])
  doctor            Doctors    @relation(fields: [doctor_id], references: [doctor_id])
}

model Medications {
  medication_id     Int        @id @default(autoincrement())
  medication_name   String
  dosage            String
  side_effects      String
  treatments        Treatments[]
}

model Treatments {
  treatment_id      Int        @id @default(autoincrement())
  patient_id        Int
  doctor_id         Int
  medication_id     Int
  treatment_description String
  treatment_date    DateTime
  patient           Patients   @relation(fields: [patient_id], references: [patient_id])
  doctor            Doctors    @relation(fields: [doctor_id], references: [doctor_id])
  medication        Medications @relation(fields: [medication_id], references: [medication_id])
}

model Insurance {
  insurance_id      Int        @id @default(autoincrement())
  patient_id        Int
  provider_name     String
  policy_number     String
  coverage_amount   Float
  patient           Patients   @relation(fields: [patient_id], references: [patient_id])
}

model LabTests {
  test_id           Int        @id @default(autoincrement())
  patient_id        Int
  test_name         String
  test_result       String
  test_date         DateTime
  doctor_id         Int
  patient           Patients   @relation(fields: [patient_id], references: [patient_id])
  doctor            Doctors    @relation(fields: [doctor_id], references: [doctor_id])
}

model Bills {
  bill_id           Int        @id @default(autoincrement())
  patient_id        Int
  total_amount      Float
  billing_date      DateTime
  insurance_covered Boolean
  amount_paid       Float
  patient           Patients   @relation(fields: [patient_id], references: [patient_id])
}
